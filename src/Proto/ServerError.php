<?php
/**
 * Generated by Protobuf protoc plugin.
 * File descriptor : PulsarApi.proto
 */


namespace Pulsar\Proto;

/**
 * Protobuf enum : pulsar.proto.ServerError
 */
class ServerError extends \Protobuf\Enum
{

    /**
     * UnknownError = 0
     */
    const UnknownError_VALUE = 0;

    /**
     * MetadataError = 1
     */
    const MetadataError_VALUE = 1;

    /**
     * PersistenceError = 2
     */
    const PersistenceError_VALUE = 2;

    /**
     * AuthenticationError = 3
     */
    const AuthenticationError_VALUE = 3;

    /**
     * AuthorizationError = 4
     */
    const AuthorizationError_VALUE = 4;

    /**
     * ConsumerBusy = 5
     */
    const ConsumerBusy_VALUE = 5;

    /**
     * ServiceNotReady = 6
     */
    const ServiceNotReady_VALUE = 6;

    /**
     * ProducerBlockedQuotaExceededError = 7
     */
    const ProducerBlockedQuotaExceededError_VALUE = 7;

    /**
     * ProducerBlockedQuotaExceededException = 8
     */
    const ProducerBlockedQuotaExceededException_VALUE = 8;

    /**
     * ChecksumError = 9
     */
    const ChecksumError_VALUE = 9;

    /**
     * UnsupportedVersionError = 10
     */
    const UnsupportedVersionError_VALUE = 10;

    /**
     * TopicNotFound = 11
     */
    const TopicNotFound_VALUE = 11;

    /**
     * SubscriptionNotFound = 12
     */
    const SubscriptionNotFound_VALUE = 12;

    /**
     * ConsumerNotFound = 13
     */
    const ConsumerNotFound_VALUE = 13;

    /**
     * TooManyRequests = 14
     */
    const TooManyRequests_VALUE = 14;

    /**
     * TopicTerminatedError = 15
     */
    const TopicTerminatedError_VALUE = 15;

    /**
     * ProducerBusy = 16
     */
    const ProducerBusy_VALUE = 16;

    /**
     * InvalidTopicName = 17
     */
    const InvalidTopicName_VALUE = 17;

    /**
     * IncompatibleSchema = 18
     */
    const IncompatibleSchema_VALUE = 18;

    /**
     * ConsumerAssignError = 19
     */
    const ConsumerAssignError_VALUE = 19;

    /**
     * TransactionCoordinatorNotFound = 20
     */
    const TransactionCoordinatorNotFound_VALUE = 20;

    /**
     * InvalidTxnStatus = 21
     */
    const InvalidTxnStatus_VALUE = 21;

    /**
     * NotAllowedError = 22
     */
    const NotAllowedError_VALUE = 22;

    /**
     * TransactionConflict = 23
     */
    const TransactionConflict_VALUE = 23;

    /**
     * TransactionNotFound = 24
     */
    const TransactionNotFound_VALUE = 24;

    /**
     * ProducerFenced = 25
     */
    const ProducerFenced_VALUE = 25;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $UnknownError = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $MetadataError = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $PersistenceError = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $AuthenticationError = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $AuthorizationError = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $ConsumerBusy = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $ServiceNotReady = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $ProducerBlockedQuotaExceededError = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $ProducerBlockedQuotaExceededException = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $ChecksumError = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $UnsupportedVersionError = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $TopicNotFound = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $SubscriptionNotFound = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $ConsumerNotFound = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $TooManyRequests = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $TopicTerminatedError = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $ProducerBusy = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $InvalidTopicName = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $IncompatibleSchema = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $ConsumerAssignError = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $TransactionCoordinatorNotFound = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $InvalidTxnStatus = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $NotAllowedError = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $TransactionConflict = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $TransactionNotFound = null;

    /**
     * @var \Pulsar\Proto\ServerError
     */
    protected static $ProducerFenced = null;

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function UnknownError()
    {
        if (self::$UnknownError !== null) {
            return self::$UnknownError;
        }

        return self::$UnknownError = new self('UnknownError', self::UnknownError_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function MetadataError()
    {
        if (self::$MetadataError !== null) {
            return self::$MetadataError;
        }

        return self::$MetadataError = new self('MetadataError', self::MetadataError_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function PersistenceError()
    {
        if (self::$PersistenceError !== null) {
            return self::$PersistenceError;
        }

        return self::$PersistenceError = new self('PersistenceError', self::PersistenceError_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function AuthenticationError()
    {
        if (self::$AuthenticationError !== null) {
            return self::$AuthenticationError;
        }

        return self::$AuthenticationError = new self('AuthenticationError', self::AuthenticationError_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function AuthorizationError()
    {
        if (self::$AuthorizationError !== null) {
            return self::$AuthorizationError;
        }

        return self::$AuthorizationError = new self('AuthorizationError', self::AuthorizationError_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function ConsumerBusy()
    {
        if (self::$ConsumerBusy !== null) {
            return self::$ConsumerBusy;
        }

        return self::$ConsumerBusy = new self('ConsumerBusy', self::ConsumerBusy_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function ServiceNotReady()
    {
        if (self::$ServiceNotReady !== null) {
            return self::$ServiceNotReady;
        }

        return self::$ServiceNotReady = new self('ServiceNotReady', self::ServiceNotReady_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function ProducerBlockedQuotaExceededError()
    {
        if (self::$ProducerBlockedQuotaExceededError !== null) {
            return self::$ProducerBlockedQuotaExceededError;
        }

        return self::$ProducerBlockedQuotaExceededError = new self('ProducerBlockedQuotaExceededError', self::ProducerBlockedQuotaExceededError_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function ProducerBlockedQuotaExceededException()
    {
        if (self::$ProducerBlockedQuotaExceededException !== null) {
            return self::$ProducerBlockedQuotaExceededException;
        }

        return self::$ProducerBlockedQuotaExceededException = new self('ProducerBlockedQuotaExceededException', self::ProducerBlockedQuotaExceededException_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function ChecksumError()
    {
        if (self::$ChecksumError !== null) {
            return self::$ChecksumError;
        }

        return self::$ChecksumError = new self('ChecksumError', self::ChecksumError_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function UnsupportedVersionError()
    {
        if (self::$UnsupportedVersionError !== null) {
            return self::$UnsupportedVersionError;
        }

        return self::$UnsupportedVersionError = new self('UnsupportedVersionError', self::UnsupportedVersionError_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function TopicNotFound()
    {
        if (self::$TopicNotFound !== null) {
            return self::$TopicNotFound;
        }

        return self::$TopicNotFound = new self('TopicNotFound', self::TopicNotFound_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function SubscriptionNotFound()
    {
        if (self::$SubscriptionNotFound !== null) {
            return self::$SubscriptionNotFound;
        }

        return self::$SubscriptionNotFound = new self('SubscriptionNotFound', self::SubscriptionNotFound_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function ConsumerNotFound()
    {
        if (self::$ConsumerNotFound !== null) {
            return self::$ConsumerNotFound;
        }

        return self::$ConsumerNotFound = new self('ConsumerNotFound', self::ConsumerNotFound_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function TooManyRequests()
    {
        if (self::$TooManyRequests !== null) {
            return self::$TooManyRequests;
        }

        return self::$TooManyRequests = new self('TooManyRequests', self::TooManyRequests_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function TopicTerminatedError()
    {
        if (self::$TopicTerminatedError !== null) {
            return self::$TopicTerminatedError;
        }

        return self::$TopicTerminatedError = new self('TopicTerminatedError', self::TopicTerminatedError_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function ProducerBusy()
    {
        if (self::$ProducerBusy !== null) {
            return self::$ProducerBusy;
        }

        return self::$ProducerBusy = new self('ProducerBusy', self::ProducerBusy_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function InvalidTopicName()
    {
        if (self::$InvalidTopicName !== null) {
            return self::$InvalidTopicName;
        }

        return self::$InvalidTopicName = new self('InvalidTopicName', self::InvalidTopicName_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function IncompatibleSchema()
    {
        if (self::$IncompatibleSchema !== null) {
            return self::$IncompatibleSchema;
        }

        return self::$IncompatibleSchema = new self('IncompatibleSchema', self::IncompatibleSchema_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function ConsumerAssignError()
    {
        if (self::$ConsumerAssignError !== null) {
            return self::$ConsumerAssignError;
        }

        return self::$ConsumerAssignError = new self('ConsumerAssignError', self::ConsumerAssignError_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function TransactionCoordinatorNotFound()
    {
        if (self::$TransactionCoordinatorNotFound !== null) {
            return self::$TransactionCoordinatorNotFound;
        }

        return self::$TransactionCoordinatorNotFound = new self('TransactionCoordinatorNotFound', self::TransactionCoordinatorNotFound_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function InvalidTxnStatus()
    {
        if (self::$InvalidTxnStatus !== null) {
            return self::$InvalidTxnStatus;
        }

        return self::$InvalidTxnStatus = new self('InvalidTxnStatus', self::InvalidTxnStatus_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function NotAllowedError()
    {
        if (self::$NotAllowedError !== null) {
            return self::$NotAllowedError;
        }

        return self::$NotAllowedError = new self('NotAllowedError', self::NotAllowedError_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function TransactionConflict()
    {
        if (self::$TransactionConflict !== null) {
            return self::$TransactionConflict;
        }

        return self::$TransactionConflict = new self('TransactionConflict', self::TransactionConflict_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function TransactionNotFound()
    {
        if (self::$TransactionNotFound !== null) {
            return self::$TransactionNotFound;
        }

        return self::$TransactionNotFound = new self('TransactionNotFound', self::TransactionNotFound_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ServerError
     */
    public static function ProducerFenced()
    {
        if (self::$ProducerFenced !== null) {
            return self::$ProducerFenced;
        }

        return self::$ProducerFenced = new self('ProducerFenced', self::ProducerFenced_VALUE);
    }

    /**
     * @param int $value
     * @return \Pulsar\Proto\ServerError
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 0:
                return self::UnknownError();
            case 1:
                return self::MetadataError();
            case 2:
                return self::PersistenceError();
            case 3:
                return self::AuthenticationError();
            case 4:
                return self::AuthorizationError();
            case 5:
                return self::ConsumerBusy();
            case 6:
                return self::ServiceNotReady();
            case 7:
                return self::ProducerBlockedQuotaExceededError();
            case 8:
                return self::ProducerBlockedQuotaExceededException();
            case 9:
                return self::ChecksumError();
            case 10:
                return self::UnsupportedVersionError();
            case 11:
                return self::TopicNotFound();
            case 12:
                return self::SubscriptionNotFound();
            case 13:
                return self::ConsumerNotFound();
            case 14:
                return self::TooManyRequests();
            case 15:
                return self::TopicTerminatedError();
            case 16:
                return self::ProducerBusy();
            case 17:
                return self::InvalidTopicName();
            case 18:
                return self::IncompatibleSchema();
            case 19:
                return self::ConsumerAssignError();
            case 20:
                return self::TransactionCoordinatorNotFound();
            case 21:
                return self::InvalidTxnStatus();
            case 22:
                return self::NotAllowedError();
            case 23:
                return self::TransactionConflict();
            case 24:
                return self::TransactionNotFound();
            case 25:
                return self::ProducerFenced();
            default:
                return null;
        }
    }


}

