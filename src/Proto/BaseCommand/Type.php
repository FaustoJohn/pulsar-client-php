<?php
/**
 * Generated by Protobuf protoc plugin.
 * File descriptor : PulsarApi.proto
 */


namespace Pulsar\Proto\BaseCommand;

/**
 * Protobuf enum : pulsar.proto.BaseCommand.Type
 */
class Type extends \Protobuf\Enum
{

    /**
     * CONNECT = 2
     */
    const CONNECT_VALUE = 2;

    /**
     * CONNECTED = 3
     */
    const CONNECTED_VALUE = 3;

    /**
     * SUBSCRIBE = 4
     */
    const SUBSCRIBE_VALUE = 4;

    /**
     * PRODUCER = 5
     */
    const PRODUCER_VALUE = 5;

    /**
     * SEND = 6
     */
    const SEND_VALUE = 6;

    /**
     * SEND_RECEIPT = 7
     */
    const SEND_RECEIPT_VALUE = 7;

    /**
     * SEND_ERROR = 8
     */
    const SEND_ERROR_VALUE = 8;

    /**
     * MESSAGE = 9
     */
    const MESSAGE_VALUE = 9;

    /**
     * ACK = 10
     */
    const ACK_VALUE = 10;

    /**
     * FLOW = 11
     */
    const FLOW_VALUE = 11;

    /**
     * UNSUBSCRIBE = 12
     */
    const UNSUBSCRIBE_VALUE = 12;

    /**
     * SUCCESS = 13
     */
    const SUCCESS_VALUE = 13;

    /**
     * ERROR = 14
     */
    const ERROR_VALUE = 14;

    /**
     * CLOSE_PRODUCER = 15
     */
    const CLOSE_PRODUCER_VALUE = 15;

    /**
     * CLOSE_CONSUMER = 16
     */
    const CLOSE_CONSUMER_VALUE = 16;

    /**
     * PRODUCER_SUCCESS = 17
     */
    const PRODUCER_SUCCESS_VALUE = 17;

    /**
     * PING = 18
     */
    const PING_VALUE = 18;

    /**
     * PONG = 19
     */
    const PONG_VALUE = 19;

    /**
     * REDELIVER_UNACKNOWLEDGED_MESSAGES = 20
     */
    const REDELIVER_UNACKNOWLEDGED_MESSAGES_VALUE = 20;

    /**
     * PARTITIONED_METADATA = 21
     */
    const PARTITIONED_METADATA_VALUE = 21;

    /**
     * PARTITIONED_METADATA_RESPONSE = 22
     */
    const PARTITIONED_METADATA_RESPONSE_VALUE = 22;

    /**
     * LOOKUP = 23
     */
    const LOOKUP_VALUE = 23;

    /**
     * LOOKUP_RESPONSE = 24
     */
    const LOOKUP_RESPONSE_VALUE = 24;

    /**
     * CONSUMER_STATS = 25
     */
    const CONSUMER_STATS_VALUE = 25;

    /**
     * CONSUMER_STATS_RESPONSE = 26
     */
    const CONSUMER_STATS_RESPONSE_VALUE = 26;

    /**
     * REACHED_END_OF_TOPIC = 27
     */
    const REACHED_END_OF_TOPIC_VALUE = 27;

    /**
     * SEEK = 28
     */
    const SEEK_VALUE = 28;

    /**
     * GET_LAST_MESSAGE_ID = 29
     */
    const GET_LAST_MESSAGE_ID_VALUE = 29;

    /**
     * GET_LAST_MESSAGE_ID_RESPONSE = 30
     */
    const GET_LAST_MESSAGE_ID_RESPONSE_VALUE = 30;

    /**
     * ACTIVE_CONSUMER_CHANGE = 31
     */
    const ACTIVE_CONSUMER_CHANGE_VALUE = 31;

    /**
     * GET_TOPICS_OF_NAMESPACE = 32
     */
    const GET_TOPICS_OF_NAMESPACE_VALUE = 32;

    /**
     * GET_TOPICS_OF_NAMESPACE_RESPONSE = 33
     */
    const GET_TOPICS_OF_NAMESPACE_RESPONSE_VALUE = 33;

    /**
     * GET_SCHEMA = 34
     */
    const GET_SCHEMA_VALUE = 34;

    /**
     * GET_SCHEMA_RESPONSE = 35
     */
    const GET_SCHEMA_RESPONSE_VALUE = 35;

    /**
     * AUTH_CHALLENGE = 36
     */
    const AUTH_CHALLENGE_VALUE = 36;

    /**
     * AUTH_RESPONSE = 37
     */
    const AUTH_RESPONSE_VALUE = 37;

    /**
     * ACK_RESPONSE = 38
     */
    const ACK_RESPONSE_VALUE = 38;

    /**
     * GET_OR_CREATE_SCHEMA = 39
     */
    const GET_OR_CREATE_SCHEMA_VALUE = 39;

    /**
     * GET_OR_CREATE_SCHEMA_RESPONSE = 40
     */
    const GET_OR_CREATE_SCHEMA_RESPONSE_VALUE = 40;

    /**
     * NEW_TXN = 50
     */
    const NEW_TXN_VALUE = 50;

    /**
     * NEW_TXN_RESPONSE = 51
     */
    const NEW_TXN_RESPONSE_VALUE = 51;

    /**
     * ADD_PARTITION_TO_TXN = 52
     */
    const ADD_PARTITION_TO_TXN_VALUE = 52;

    /**
     * ADD_PARTITION_TO_TXN_RESPONSE = 53
     */
    const ADD_PARTITION_TO_TXN_RESPONSE_VALUE = 53;

    /**
     * ADD_SUBSCRIPTION_TO_TXN = 54
     */
    const ADD_SUBSCRIPTION_TO_TXN_VALUE = 54;

    /**
     * ADD_SUBSCRIPTION_TO_TXN_RESPONSE = 55
     */
    const ADD_SUBSCRIPTION_TO_TXN_RESPONSE_VALUE = 55;

    /**
     * END_TXN = 56
     */
    const END_TXN_VALUE = 56;

    /**
     * END_TXN_RESPONSE = 57
     */
    const END_TXN_RESPONSE_VALUE = 57;

    /**
     * END_TXN_ON_PARTITION = 58
     */
    const END_TXN_ON_PARTITION_VALUE = 58;

    /**
     * END_TXN_ON_PARTITION_RESPONSE = 59
     */
    const END_TXN_ON_PARTITION_RESPONSE_VALUE = 59;

    /**
     * END_TXN_ON_SUBSCRIPTION = 60
     */
    const END_TXN_ON_SUBSCRIPTION_VALUE = 60;

    /**
     * END_TXN_ON_SUBSCRIPTION_RESPONSE = 61
     */
    const END_TXN_ON_SUBSCRIPTION_RESPONSE_VALUE = 61;

    /**
     * TC_CLIENT_CONNECT_REQUEST = 62
     */
    const TC_CLIENT_CONNECT_REQUEST_VALUE = 62;

    /**
     * TC_CLIENT_CONNECT_RESPONSE = 63
     */
    const TC_CLIENT_CONNECT_RESPONSE_VALUE = 63;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $CONNECT = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $CONNECTED = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $SUBSCRIBE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $PRODUCER = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $SEND = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $SEND_RECEIPT = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $SEND_ERROR = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $MESSAGE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $ACK = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $FLOW = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $UNSUBSCRIBE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $SUCCESS = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $ERROR = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $CLOSE_PRODUCER = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $CLOSE_CONSUMER = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $PRODUCER_SUCCESS = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $PING = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $PONG = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $REDELIVER_UNACKNOWLEDGED_MESSAGES = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $PARTITIONED_METADATA = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $PARTITIONED_METADATA_RESPONSE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $LOOKUP = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $LOOKUP_RESPONSE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $CONSUMER_STATS = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $CONSUMER_STATS_RESPONSE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $REACHED_END_OF_TOPIC = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $SEEK = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $GET_LAST_MESSAGE_ID = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $GET_LAST_MESSAGE_ID_RESPONSE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $ACTIVE_CONSUMER_CHANGE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $GET_TOPICS_OF_NAMESPACE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $GET_TOPICS_OF_NAMESPACE_RESPONSE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $GET_SCHEMA = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $GET_SCHEMA_RESPONSE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $AUTH_CHALLENGE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $AUTH_RESPONSE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $ACK_RESPONSE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $GET_OR_CREATE_SCHEMA = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $GET_OR_CREATE_SCHEMA_RESPONSE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $NEW_TXN = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $NEW_TXN_RESPONSE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $ADD_PARTITION_TO_TXN = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $ADD_PARTITION_TO_TXN_RESPONSE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $ADD_SUBSCRIPTION_TO_TXN = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $ADD_SUBSCRIPTION_TO_TXN_RESPONSE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $END_TXN = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $END_TXN_RESPONSE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $END_TXN_ON_PARTITION = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $END_TXN_ON_PARTITION_RESPONSE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $END_TXN_ON_SUBSCRIPTION = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $END_TXN_ON_SUBSCRIPTION_RESPONSE = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $TC_CLIENT_CONNECT_REQUEST = null;

    /**
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected static $TC_CLIENT_CONNECT_RESPONSE = null;

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function CONNECT()
    {
        if (self::$CONNECT !== null) {
            return self::$CONNECT;
        }

        return self::$CONNECT = new self('CONNECT', self::CONNECT_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function CONNECTED()
    {
        if (self::$CONNECTED !== null) {
            return self::$CONNECTED;
        }

        return self::$CONNECTED = new self('CONNECTED', self::CONNECTED_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function SUBSCRIBE()
    {
        if (self::$SUBSCRIBE !== null) {
            return self::$SUBSCRIBE;
        }

        return self::$SUBSCRIBE = new self('SUBSCRIBE', self::SUBSCRIBE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function PRODUCER()
    {
        if (self::$PRODUCER !== null) {
            return self::$PRODUCER;
        }

        return self::$PRODUCER = new self('PRODUCER', self::PRODUCER_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function SEND()
    {
        if (self::$SEND !== null) {
            return self::$SEND;
        }

        return self::$SEND = new self('SEND', self::SEND_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function SEND_RECEIPT()
    {
        if (self::$SEND_RECEIPT !== null) {
            return self::$SEND_RECEIPT;
        }

        return self::$SEND_RECEIPT = new self('SEND_RECEIPT', self::SEND_RECEIPT_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function SEND_ERROR()
    {
        if (self::$SEND_ERROR !== null) {
            return self::$SEND_ERROR;
        }

        return self::$SEND_ERROR = new self('SEND_ERROR', self::SEND_ERROR_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function MESSAGE()
    {
        if (self::$MESSAGE !== null) {
            return self::$MESSAGE;
        }

        return self::$MESSAGE = new self('MESSAGE', self::MESSAGE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function ACK()
    {
        if (self::$ACK !== null) {
            return self::$ACK;
        }

        return self::$ACK = new self('ACK', self::ACK_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function FLOW()
    {
        if (self::$FLOW !== null) {
            return self::$FLOW;
        }

        return self::$FLOW = new self('FLOW', self::FLOW_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function UNSUBSCRIBE()
    {
        if (self::$UNSUBSCRIBE !== null) {
            return self::$UNSUBSCRIBE;
        }

        return self::$UNSUBSCRIBE = new self('UNSUBSCRIBE', self::UNSUBSCRIBE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function SUCCESS()
    {
        if (self::$SUCCESS !== null) {
            return self::$SUCCESS;
        }

        return self::$SUCCESS = new self('SUCCESS', self::SUCCESS_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function ERROR()
    {
        if (self::$ERROR !== null) {
            return self::$ERROR;
        }

        return self::$ERROR = new self('ERROR', self::ERROR_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function CLOSE_PRODUCER()
    {
        if (self::$CLOSE_PRODUCER !== null) {
            return self::$CLOSE_PRODUCER;
        }

        return self::$CLOSE_PRODUCER = new self('CLOSE_PRODUCER', self::CLOSE_PRODUCER_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function CLOSE_CONSUMER()
    {
        if (self::$CLOSE_CONSUMER !== null) {
            return self::$CLOSE_CONSUMER;
        }

        return self::$CLOSE_CONSUMER = new self('CLOSE_CONSUMER', self::CLOSE_CONSUMER_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function PRODUCER_SUCCESS()
    {
        if (self::$PRODUCER_SUCCESS !== null) {
            return self::$PRODUCER_SUCCESS;
        }

        return self::$PRODUCER_SUCCESS = new self('PRODUCER_SUCCESS', self::PRODUCER_SUCCESS_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function PING()
    {
        if (self::$PING !== null) {
            return self::$PING;
        }

        return self::$PING = new self('PING', self::PING_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function PONG()
    {
        if (self::$PONG !== null) {
            return self::$PONG;
        }

        return self::$PONG = new self('PONG', self::PONG_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function REDELIVER_UNACKNOWLEDGED_MESSAGES()
    {
        if (self::$REDELIVER_UNACKNOWLEDGED_MESSAGES !== null) {
            return self::$REDELIVER_UNACKNOWLEDGED_MESSAGES;
        }

        return self::$REDELIVER_UNACKNOWLEDGED_MESSAGES = new self('REDELIVER_UNACKNOWLEDGED_MESSAGES', self::REDELIVER_UNACKNOWLEDGED_MESSAGES_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function PARTITIONED_METADATA()
    {
        if (self::$PARTITIONED_METADATA !== null) {
            return self::$PARTITIONED_METADATA;
        }

        return self::$PARTITIONED_METADATA = new self('PARTITIONED_METADATA', self::PARTITIONED_METADATA_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function PARTITIONED_METADATA_RESPONSE()
    {
        if (self::$PARTITIONED_METADATA_RESPONSE !== null) {
            return self::$PARTITIONED_METADATA_RESPONSE;
        }

        return self::$PARTITIONED_METADATA_RESPONSE = new self('PARTITIONED_METADATA_RESPONSE', self::PARTITIONED_METADATA_RESPONSE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function LOOKUP()
    {
        if (self::$LOOKUP !== null) {
            return self::$LOOKUP;
        }

        return self::$LOOKUP = new self('LOOKUP', self::LOOKUP_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function LOOKUP_RESPONSE()
    {
        if (self::$LOOKUP_RESPONSE !== null) {
            return self::$LOOKUP_RESPONSE;
        }

        return self::$LOOKUP_RESPONSE = new self('LOOKUP_RESPONSE', self::LOOKUP_RESPONSE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function CONSUMER_STATS()
    {
        if (self::$CONSUMER_STATS !== null) {
            return self::$CONSUMER_STATS;
        }

        return self::$CONSUMER_STATS = new self('CONSUMER_STATS', self::CONSUMER_STATS_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function CONSUMER_STATS_RESPONSE()
    {
        if (self::$CONSUMER_STATS_RESPONSE !== null) {
            return self::$CONSUMER_STATS_RESPONSE;
        }

        return self::$CONSUMER_STATS_RESPONSE = new self('CONSUMER_STATS_RESPONSE', self::CONSUMER_STATS_RESPONSE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function REACHED_END_OF_TOPIC()
    {
        if (self::$REACHED_END_OF_TOPIC !== null) {
            return self::$REACHED_END_OF_TOPIC;
        }

        return self::$REACHED_END_OF_TOPIC = new self('REACHED_END_OF_TOPIC', self::REACHED_END_OF_TOPIC_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function SEEK()
    {
        if (self::$SEEK !== null) {
            return self::$SEEK;
        }

        return self::$SEEK = new self('SEEK', self::SEEK_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function GET_LAST_MESSAGE_ID()
    {
        if (self::$GET_LAST_MESSAGE_ID !== null) {
            return self::$GET_LAST_MESSAGE_ID;
        }

        return self::$GET_LAST_MESSAGE_ID = new self('GET_LAST_MESSAGE_ID', self::GET_LAST_MESSAGE_ID_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function GET_LAST_MESSAGE_ID_RESPONSE()
    {
        if (self::$GET_LAST_MESSAGE_ID_RESPONSE !== null) {
            return self::$GET_LAST_MESSAGE_ID_RESPONSE;
        }

        return self::$GET_LAST_MESSAGE_ID_RESPONSE = new self('GET_LAST_MESSAGE_ID_RESPONSE', self::GET_LAST_MESSAGE_ID_RESPONSE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function ACTIVE_CONSUMER_CHANGE()
    {
        if (self::$ACTIVE_CONSUMER_CHANGE !== null) {
            return self::$ACTIVE_CONSUMER_CHANGE;
        }

        return self::$ACTIVE_CONSUMER_CHANGE = new self('ACTIVE_CONSUMER_CHANGE', self::ACTIVE_CONSUMER_CHANGE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function GET_TOPICS_OF_NAMESPACE()
    {
        if (self::$GET_TOPICS_OF_NAMESPACE !== null) {
            return self::$GET_TOPICS_OF_NAMESPACE;
        }

        return self::$GET_TOPICS_OF_NAMESPACE = new self('GET_TOPICS_OF_NAMESPACE', self::GET_TOPICS_OF_NAMESPACE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function GET_TOPICS_OF_NAMESPACE_RESPONSE()
    {
        if (self::$GET_TOPICS_OF_NAMESPACE_RESPONSE !== null) {
            return self::$GET_TOPICS_OF_NAMESPACE_RESPONSE;
        }

        return self::$GET_TOPICS_OF_NAMESPACE_RESPONSE = new self('GET_TOPICS_OF_NAMESPACE_RESPONSE', self::GET_TOPICS_OF_NAMESPACE_RESPONSE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function GET_SCHEMA()
    {
        if (self::$GET_SCHEMA !== null) {
            return self::$GET_SCHEMA;
        }

        return self::$GET_SCHEMA = new self('GET_SCHEMA', self::GET_SCHEMA_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function GET_SCHEMA_RESPONSE()
    {
        if (self::$GET_SCHEMA_RESPONSE !== null) {
            return self::$GET_SCHEMA_RESPONSE;
        }

        return self::$GET_SCHEMA_RESPONSE = new self('GET_SCHEMA_RESPONSE', self::GET_SCHEMA_RESPONSE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function AUTH_CHALLENGE()
    {
        if (self::$AUTH_CHALLENGE !== null) {
            return self::$AUTH_CHALLENGE;
        }

        return self::$AUTH_CHALLENGE = new self('AUTH_CHALLENGE', self::AUTH_CHALLENGE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function AUTH_RESPONSE()
    {
        if (self::$AUTH_RESPONSE !== null) {
            return self::$AUTH_RESPONSE;
        }

        return self::$AUTH_RESPONSE = new self('AUTH_RESPONSE', self::AUTH_RESPONSE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function ACK_RESPONSE()
    {
        if (self::$ACK_RESPONSE !== null) {
            return self::$ACK_RESPONSE;
        }

        return self::$ACK_RESPONSE = new self('ACK_RESPONSE', self::ACK_RESPONSE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function GET_OR_CREATE_SCHEMA()
    {
        if (self::$GET_OR_CREATE_SCHEMA !== null) {
            return self::$GET_OR_CREATE_SCHEMA;
        }

        return self::$GET_OR_CREATE_SCHEMA = new self('GET_OR_CREATE_SCHEMA', self::GET_OR_CREATE_SCHEMA_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function GET_OR_CREATE_SCHEMA_RESPONSE()
    {
        if (self::$GET_OR_CREATE_SCHEMA_RESPONSE !== null) {
            return self::$GET_OR_CREATE_SCHEMA_RESPONSE;
        }

        return self::$GET_OR_CREATE_SCHEMA_RESPONSE = new self('GET_OR_CREATE_SCHEMA_RESPONSE', self::GET_OR_CREATE_SCHEMA_RESPONSE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function NEW_TXN()
    {
        if (self::$NEW_TXN !== null) {
            return self::$NEW_TXN;
        }

        return self::$NEW_TXN = new self('NEW_TXN', self::NEW_TXN_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function NEW_TXN_RESPONSE()
    {
        if (self::$NEW_TXN_RESPONSE !== null) {
            return self::$NEW_TXN_RESPONSE;
        }

        return self::$NEW_TXN_RESPONSE = new self('NEW_TXN_RESPONSE', self::NEW_TXN_RESPONSE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function ADD_PARTITION_TO_TXN()
    {
        if (self::$ADD_PARTITION_TO_TXN !== null) {
            return self::$ADD_PARTITION_TO_TXN;
        }

        return self::$ADD_PARTITION_TO_TXN = new self('ADD_PARTITION_TO_TXN', self::ADD_PARTITION_TO_TXN_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function ADD_PARTITION_TO_TXN_RESPONSE()
    {
        if (self::$ADD_PARTITION_TO_TXN_RESPONSE !== null) {
            return self::$ADD_PARTITION_TO_TXN_RESPONSE;
        }

        return self::$ADD_PARTITION_TO_TXN_RESPONSE = new self('ADD_PARTITION_TO_TXN_RESPONSE', self::ADD_PARTITION_TO_TXN_RESPONSE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function ADD_SUBSCRIPTION_TO_TXN()
    {
        if (self::$ADD_SUBSCRIPTION_TO_TXN !== null) {
            return self::$ADD_SUBSCRIPTION_TO_TXN;
        }

        return self::$ADD_SUBSCRIPTION_TO_TXN = new self('ADD_SUBSCRIPTION_TO_TXN', self::ADD_SUBSCRIPTION_TO_TXN_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function ADD_SUBSCRIPTION_TO_TXN_RESPONSE()
    {
        if (self::$ADD_SUBSCRIPTION_TO_TXN_RESPONSE !== null) {
            return self::$ADD_SUBSCRIPTION_TO_TXN_RESPONSE;
        }

        return self::$ADD_SUBSCRIPTION_TO_TXN_RESPONSE = new self('ADD_SUBSCRIPTION_TO_TXN_RESPONSE', self::ADD_SUBSCRIPTION_TO_TXN_RESPONSE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function END_TXN()
    {
        if (self::$END_TXN !== null) {
            return self::$END_TXN;
        }

        return self::$END_TXN = new self('END_TXN', self::END_TXN_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function END_TXN_RESPONSE()
    {
        if (self::$END_TXN_RESPONSE !== null) {
            return self::$END_TXN_RESPONSE;
        }

        return self::$END_TXN_RESPONSE = new self('END_TXN_RESPONSE', self::END_TXN_RESPONSE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function END_TXN_ON_PARTITION()
    {
        if (self::$END_TXN_ON_PARTITION !== null) {
            return self::$END_TXN_ON_PARTITION;
        }

        return self::$END_TXN_ON_PARTITION = new self('END_TXN_ON_PARTITION', self::END_TXN_ON_PARTITION_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function END_TXN_ON_PARTITION_RESPONSE()
    {
        if (self::$END_TXN_ON_PARTITION_RESPONSE !== null) {
            return self::$END_TXN_ON_PARTITION_RESPONSE;
        }

        return self::$END_TXN_ON_PARTITION_RESPONSE = new self('END_TXN_ON_PARTITION_RESPONSE', self::END_TXN_ON_PARTITION_RESPONSE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function END_TXN_ON_SUBSCRIPTION()
    {
        if (self::$END_TXN_ON_SUBSCRIPTION !== null) {
            return self::$END_TXN_ON_SUBSCRIPTION;
        }

        return self::$END_TXN_ON_SUBSCRIPTION = new self('END_TXN_ON_SUBSCRIPTION', self::END_TXN_ON_SUBSCRIPTION_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function END_TXN_ON_SUBSCRIPTION_RESPONSE()
    {
        if (self::$END_TXN_ON_SUBSCRIPTION_RESPONSE !== null) {
            return self::$END_TXN_ON_SUBSCRIPTION_RESPONSE;
        }

        return self::$END_TXN_ON_SUBSCRIPTION_RESPONSE = new self('END_TXN_ON_SUBSCRIPTION_RESPONSE', self::END_TXN_ON_SUBSCRIPTION_RESPONSE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function TC_CLIENT_CONNECT_REQUEST()
    {
        if (self::$TC_CLIENT_CONNECT_REQUEST !== null) {
            return self::$TC_CLIENT_CONNECT_REQUEST;
        }

        return self::$TC_CLIENT_CONNECT_REQUEST = new self('TC_CLIENT_CONNECT_REQUEST', self::TC_CLIENT_CONNECT_REQUEST_VALUE);
    }

    /**
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function TC_CLIENT_CONNECT_RESPONSE()
    {
        if (self::$TC_CLIENT_CONNECT_RESPONSE !== null) {
            return self::$TC_CLIENT_CONNECT_RESPONSE;
        }

        return self::$TC_CLIENT_CONNECT_RESPONSE = new self('TC_CLIENT_CONNECT_RESPONSE', self::TC_CLIENT_CONNECT_RESPONSE_VALUE);
    }

    /**
     * @param int $value
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 2:
                return self::CONNECT();
            case 3:
                return self::CONNECTED();
            case 4:
                return self::SUBSCRIBE();
            case 5:
                return self::PRODUCER();
            case 6:
                return self::SEND();
            case 7:
                return self::SEND_RECEIPT();
            case 8:
                return self::SEND_ERROR();
            case 9:
                return self::MESSAGE();
            case 10:
                return self::ACK();
            case 11:
                return self::FLOW();
            case 12:
                return self::UNSUBSCRIBE();
            case 13:
                return self::SUCCESS();
            case 14:
                return self::ERROR();
            case 15:
                return self::CLOSE_PRODUCER();
            case 16:
                return self::CLOSE_CONSUMER();
            case 17:
                return self::PRODUCER_SUCCESS();
            case 18:
                return self::PING();
            case 19:
                return self::PONG();
            case 20:
                return self::REDELIVER_UNACKNOWLEDGED_MESSAGES();
            case 21:
                return self::PARTITIONED_METADATA();
            case 22:
                return self::PARTITIONED_METADATA_RESPONSE();
            case 23:
                return self::LOOKUP();
            case 24:
                return self::LOOKUP_RESPONSE();
            case 25:
                return self::CONSUMER_STATS();
            case 26:
                return self::CONSUMER_STATS_RESPONSE();
            case 27:
                return self::REACHED_END_OF_TOPIC();
            case 28:
                return self::SEEK();
            case 29:
                return self::GET_LAST_MESSAGE_ID();
            case 30:
                return self::GET_LAST_MESSAGE_ID_RESPONSE();
            case 31:
                return self::ACTIVE_CONSUMER_CHANGE();
            case 32:
                return self::GET_TOPICS_OF_NAMESPACE();
            case 33:
                return self::GET_TOPICS_OF_NAMESPACE_RESPONSE();
            case 34:
                return self::GET_SCHEMA();
            case 35:
                return self::GET_SCHEMA_RESPONSE();
            case 36:
                return self::AUTH_CHALLENGE();
            case 37:
                return self::AUTH_RESPONSE();
            case 38:
                return self::ACK_RESPONSE();
            case 39:
                return self::GET_OR_CREATE_SCHEMA();
            case 40:
                return self::GET_OR_CREATE_SCHEMA_RESPONSE();
            case 50:
                return self::NEW_TXN();
            case 51:
                return self::NEW_TXN_RESPONSE();
            case 52:
                return self::ADD_PARTITION_TO_TXN();
            case 53:
                return self::ADD_PARTITION_TO_TXN_RESPONSE();
            case 54:
                return self::ADD_SUBSCRIPTION_TO_TXN();
            case 55:
                return self::ADD_SUBSCRIPTION_TO_TXN_RESPONSE();
            case 56:
                return self::END_TXN();
            case 57:
                return self::END_TXN_RESPONSE();
            case 58:
                return self::END_TXN_ON_PARTITION();
            case 59:
                return self::END_TXN_ON_PARTITION_RESPONSE();
            case 60:
                return self::END_TXN_ON_SUBSCRIPTION();
            case 61:
                return self::END_TXN_ON_SUBSCRIPTION_RESPONSE();
            case 62:
                return self::TC_CLIENT_CONNECT_REQUEST();
            case 63:
                return self::TC_CLIENT_CONNECT_RESPONSE();
            default:
                return null;
        }
    }


}

