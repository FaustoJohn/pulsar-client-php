<?php
/**
 * Generated by Protobuf protoc plugin.
 * File descriptor : PulsarApi.proto
 */


namespace Pulsar\Proto;

/**
 * Protobuf enum : pulsar.proto.CompressionType
 */
class CompressionType extends \Protobuf\Enum
{

    /**
     * NONE = 0
     */
    const NONE_VALUE = 0;

    /**
     * LZ4 = 1
     */
    const LZ4_VALUE = 1;

    /**
     * ZLIB = 2
     */
    const ZLIB_VALUE = 2;

    /**
     * ZSTD = 3
     */
    const ZSTD_VALUE = 3;

    /**
     * SNAPPY = 4
     */
    const SNAPPY_VALUE = 4;

    /**
     * @var \Pulsar\Proto\CompressionType
     */
    protected static $NONE = null;

    /**
     * @var \Pulsar\Proto\CompressionType
     */
    protected static $LZ4 = null;

    /**
     * @var \Pulsar\Proto\CompressionType
     */
    protected static $ZLIB = null;

    /**
     * @var \Pulsar\Proto\CompressionType
     */
    protected static $ZSTD = null;

    /**
     * @var \Pulsar\Proto\CompressionType
     */
    protected static $SNAPPY = null;

    /**
     * @return \Pulsar\Proto\CompressionType
     */
    public static function NONE()
    {
        if (self::$NONE !== null) {
            return self::$NONE;
        }

        return self::$NONE = new self('NONE', self::NONE_VALUE);
    }

    /**
     * @return \Pulsar\Proto\CompressionType
     */
    public static function LZ4()
    {
        if (self::$LZ4 !== null) {
            return self::$LZ4;
        }

        return self::$LZ4 = new self('LZ4', self::LZ4_VALUE);
    }

    /**
     * @return \Pulsar\Proto\CompressionType
     */
    public static function ZLIB()
    {
        if (self::$ZLIB !== null) {
            return self::$ZLIB;
        }

        return self::$ZLIB = new self('ZLIB', self::ZLIB_VALUE);
    }

    /**
     * @return \Pulsar\Proto\CompressionType
     */
    public static function ZSTD()
    {
        if (self::$ZSTD !== null) {
            return self::$ZSTD;
        }

        return self::$ZSTD = new self('ZSTD', self::ZSTD_VALUE);
    }

    /**
     * @return \Pulsar\Proto\CompressionType
     */
    public static function SNAPPY()
    {
        if (self::$SNAPPY !== null) {
            return self::$SNAPPY;
        }

        return self::$SNAPPY = new self('SNAPPY', self::SNAPPY_VALUE);
    }

    /**
     * @param int $value
     * @return \Pulsar\Proto\CompressionType
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 0:
                return self::NONE();
            case 1:
                return self::LZ4();
            case 2:
                return self::ZLIB();
            case 3:
                return self::ZSTD();
            case 4:
                return self::SNAPPY();
            default:
                return null;
        }
    }


}

