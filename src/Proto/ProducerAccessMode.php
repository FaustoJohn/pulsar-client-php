<?php
/**
 * Generated by Protobuf protoc plugin.
 * File descriptor : PulsarApi.proto
 */


namespace Pulsar\Proto;

/**
 * Protobuf enum : pulsar.proto.ProducerAccessMode
 */
class ProducerAccessMode extends \Protobuf\Enum
{

    /**
     * Shared = 0
     */
    const Shared_VALUE = 0;

    /**
     * Exclusive = 1
     */
    const Exclusive_VALUE = 1;

    /**
     * WaitForExclusive = 2
     */
    const WaitForExclusive_VALUE = 2;

    /**
     * ExclusiveWithFencing = 3
     */
    const ExclusiveWithFencing_VALUE = 3;

    /**
     * @var \Pulsar\Proto\ProducerAccessMode
     */
    protected static $Shared = null;

    /**
     * @var \Pulsar\Proto\ProducerAccessMode
     */
    protected static $Exclusive = null;

    /**
     * @var \Pulsar\Proto\ProducerAccessMode
     */
    protected static $WaitForExclusive = null;

    /**
     * @var \Pulsar\Proto\ProducerAccessMode
     */
    protected static $ExclusiveWithFencing = null;

    /**
     * @return \Pulsar\Proto\ProducerAccessMode
     */
    public static function Shared()
    {
        if (self::$Shared !== null) {
            return self::$Shared;
        }

        return self::$Shared = new self('Shared', self::Shared_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ProducerAccessMode
     */
    public static function Exclusive()
    {
        if (self::$Exclusive !== null) {
            return self::$Exclusive;
        }

        return self::$Exclusive = new self('Exclusive', self::Exclusive_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ProducerAccessMode
     */
    public static function WaitForExclusive()
    {
        if (self::$WaitForExclusive !== null) {
            return self::$WaitForExclusive;
        }

        return self::$WaitForExclusive = new self('WaitForExclusive', self::WaitForExclusive_VALUE);
    }

    /**
     * @return \Pulsar\Proto\ProducerAccessMode
     */
    public static function ExclusiveWithFencing()
    {
        if (self::$ExclusiveWithFencing !== null) {
            return self::$ExclusiveWithFencing;
        }

        return self::$ExclusiveWithFencing = new self('ExclusiveWithFencing', self::ExclusiveWithFencing_VALUE);
    }

    /**
     * @param int $value
     * @return \Pulsar\Proto\ProducerAccessMode
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 0:
                return self::Shared();
            case 1:
                return self::Exclusive();
            case 2:
                return self::WaitForExclusive();
            case 3:
                return self::ExclusiveWithFencing();
            default:
                return null;
        }
    }


}

